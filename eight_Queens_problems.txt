The 8 Queens Problem is a classic backtracking algorithm problem in which you need to place 8 queens on an 8Ã—8 chessboard such that no two queens attack each other. This means:

No two queens should be in the same row.
No two queens should be in the same column.
No two queens should be in the same diagonal.
Solution Approach (Backtracking Algorithm)
Start from the first row and try to place a queen in each column.
If placing a queen is safe, move to the next row.
If a conflict occurs, backtrack by removing the previous queen and trying the next available position.
Repeat this process until all 8 queens are placed successfully.


N = 8

def print_solution(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print("\n")

def is_safe(board, row, col):
    # Check the column
    for i in range(row):
        if board[i][col]: 
            return False

    # Check the upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]: 
            return False

    # Check the upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j]: 
            return False

    return True

def solve_n_queens(board, row):
    if row >= N:  
        print_solution(board)
        return True  # Change to False to find all solutions

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_n_queens(board, row + 1):
                return True
            board[row][col] = 0  # Backtrack

    return False

def solve():
    board = [[0] * N for _ in range(N)]
    if not solve_n_queens(board, 0):
        print("No solution exists")

solve()
